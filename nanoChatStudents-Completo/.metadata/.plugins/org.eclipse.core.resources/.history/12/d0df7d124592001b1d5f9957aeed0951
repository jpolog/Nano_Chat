package es.um.redes.nanoChat.messageML;
import es.um.redes.nanoChat.server.roomManager.NCRoomDescription;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;


public class SendRoomList extends NCMessage {
	private static final byte OPCODE = 10;
	private byte opcode;
	private List<NCRoomDescription> descRoomList;
	
	
	private static final String RE_ROOM = "<room>(.*?)</room>";
	private static final String ROOM_MARK = "room";
	private static final String RE_USERS = "<users>(.*?)</users>";
	private static final String USERS_MARK = "users";
	private static final String RE_NICK = "<nick>(.*?)</nick>";
	private static final String NICK_MARK = "nick";
	
	

	public SendRoomList(List<NCRoomDescription> list) {
		this.opcode = OPCODE;
		this.descRoomList = Collections.unmodifiableList(list); //Colección no modificable
	}
	

	@Override
	protected String toEncodedString() {
		
		StringBuffer sb = new StringBuffer();
		
		sb.append("<"+MESSAGE_MARK+">");
		sb.append("<"+OPERATION_MARK+">"+this.opcode+"</"+OPERATION_MARK+">");
		for(NCRoomDescription room : this.descRoomList) {
			sb.append("<"+ROOM_MARK+">"+room.roomName+"</"+ROOM_MARK+">");
			sb.append("<"+USERS_MARK+">");
			for(String nick : room.members) {
				sb.append("<"+NICK_MARK+">"+nick+"</"+NICK_MARK+">");
			}
			sb.append("</"+USERS_MARK+">");
		}
		
		sb.append("</"+MESSAGE_MARK+">");
		
		String message = sb.toString();
		return message;
	}
	
	public static SendRoomList readFromString(String message) {
		String found_room = null;

		// Tienen que estar los campos porque el mensaje es de tipo RoomMessage
		Pattern pat_room = Pattern.compile(RE_ROOM);
		Matcher mat_room = pat_room.matcher(message);
		Pattern pat_users = Pattern.compile(RE_USERS);
		Matcher mat_users;ç
		Pattern pat_nick = Pattern.compile(RE_NICK);
		Matcher mat_nick;
		
		while (mat_room.find()) {
			mat_users = pat_users.matcher(message);
			if(mat_users.find()) {
				mat_nick = pat_nick.matcher(message);
				Set<String> nkSet = new HashSet<>();
				while(mat_nick.find()) {
					
				}
			}
			// Room found
			found_room = mat_room.group(1);
		} 
		
		return new RegisterNick(found_nick);
	}
	
}
